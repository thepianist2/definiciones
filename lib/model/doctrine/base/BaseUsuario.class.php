<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuario', 'doctrine');

/**
 * BaseUsuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idPerfil
 * @property string $login
 * @property string $password
 * @property string $email
 * @property string $nombre
 * @property string $apellidos
 * @property string $facebook
 * @property string $twitter
 * @property boolean $activo
 * @property boolean $validado
 * @property boolean $borrado
 * @property string $lang
 * @property Perfil $Perfil
 * @property Doctrine_Collection $Palabra
 * 
 * @method integer             getIdPerfil()  Returns the current record's "idPerfil" value
 * @method string              getLogin()     Returns the current record's "login" value
 * @method string              getPassword()  Returns the current record's "password" value
 * @method string              getEmail()     Returns the current record's "email" value
 * @method string              getNombre()    Returns the current record's "nombre" value
 * @method string              getApellidos() Returns the current record's "apellidos" value
 * @method string              getFacebook()  Returns the current record's "facebook" value
 * @method string              getTwitter()   Returns the current record's "twitter" value
 * @method boolean             getActivo()    Returns the current record's "activo" value
 * @method boolean             getValidado()  Returns the current record's "validado" value
 * @method boolean             getBorrado()   Returns the current record's "borrado" value
 * @method string              getLang()      Returns the current record's "lang" value
 * @method Perfil              getPerfil()    Returns the current record's "Perfil" value
 * @method Doctrine_Collection getPalabra()   Returns the current record's "Palabra" collection
 * @method Usuario             setIdPerfil()  Sets the current record's "idPerfil" value
 * @method Usuario             setLogin()     Sets the current record's "login" value
 * @method Usuario             setPassword()  Sets the current record's "password" value
 * @method Usuario             setEmail()     Sets the current record's "email" value
 * @method Usuario             setNombre()    Sets the current record's "nombre" value
 * @method Usuario             setApellidos() Sets the current record's "apellidos" value
 * @method Usuario             setFacebook()  Sets the current record's "facebook" value
 * @method Usuario             setTwitter()   Sets the current record's "twitter" value
 * @method Usuario             setActivo()    Sets the current record's "activo" value
 * @method Usuario             setValidado()  Sets the current record's "validado" value
 * @method Usuario             setBorrado()   Sets the current record's "borrado" value
 * @method Usuario             setLang()      Sets the current record's "lang" value
 * @method Usuario             setPerfil()    Sets the current record's "Perfil" value
 * @method Usuario             setPalabra()   Sets the current record's "Palabra" collection
 * 
 * @package    definiciones
 * @subpackage model
 * @author     Fabian Allel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuario');
        $this->hasColumn('idPerfil', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('login', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'unique' => true,
             'length' => 150,
             ));
        $this->hasColumn('password', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 40,
             ));
        $this->hasColumn('email', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'unique' => true,
             'length' => 150,
             ));
        $this->hasColumn('nombre', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('apellidos', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('facebook', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('twitter', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('activo', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'default' => '1',
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('validado', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'default' => '0',
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('borrado', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'default' => '0',
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('lang', 'string', 4, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'default' => 'es',
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Perfil', array(
             'local' => 'idPerfil',
             'foreign' => 'id'));

        $this->hasMany('Palabra', array(
             'local' => 'id',
             'foreign' => 'idUsuario'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}