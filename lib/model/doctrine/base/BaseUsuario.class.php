<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuario', 'doctrine');

/**
 * BaseUsuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $idperfil
 * @property string $login
 * @property string $password
 * @property string $email
 * @property string $nombre
 * @property string $apellidos
 * @property string $facebook
 * @property string $twitter
 * @property integer $activo
 * @property integer $validado
 * @property integer $borrado
 * @property string $lang
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Perfil $Perfil
 * 
 * @method integer   getId()         Returns the current record's "id" value
 * @method integer   getIdperfil()   Returns the current record's "idperfil" value
 * @method string    getLogin()      Returns the current record's "login" value
 * @method string    getPassword()   Returns the current record's "password" value
 * @method string    getEmail()      Returns the current record's "email" value
 * @method string    getNombre()     Returns the current record's "nombre" value
 * @method string    getApellidos()  Returns the current record's "apellidos" value
 * @method string    getFacebook()   Returns the current record's "facebook" value
 * @method string    getTwitter()    Returns the current record's "twitter" value
 * @method integer   getActivo()     Returns the current record's "activo" value
 * @method integer   getValidado()   Returns the current record's "validado" value
 * @method integer   getBorrado()    Returns the current record's "borrado" value
 * @method string    getLang()       Returns the current record's "lang" value
 * @method timestamp getCreatedAt()  Returns the current record's "created_at" value
 * @method timestamp getUpdatedAt()  Returns the current record's "updated_at" value
 * @method Perfil    getPerfil()     Returns the current record's "Perfil" value
 * @method Usuario   setId()         Sets the current record's "id" value
 * @method Usuario   setIdperfil()   Sets the current record's "idperfil" value
 * @method Usuario   setLogin()      Sets the current record's "login" value
 * @method Usuario   setPassword()   Sets the current record's "password" value
 * @method Usuario   setEmail()      Sets the current record's "email" value
 * @method Usuario   setNombre()     Sets the current record's "nombre" value
 * @method Usuario   setApellidos()  Sets the current record's "apellidos" value
 * @method Usuario   setFacebook()   Sets the current record's "facebook" value
 * @method Usuario   setTwitter()    Sets the current record's "twitter" value
 * @method Usuario   setActivo()     Sets the current record's "activo" value
 * @method Usuario   setValidado()   Sets the current record's "validado" value
 * @method Usuario   setBorrado()    Sets the current record's "borrado" value
 * @method Usuario   setLang()       Sets the current record's "lang" value
 * @method Usuario   setCreatedAt()  Sets the current record's "created_at" value
 * @method Usuario   setUpdatedAt()  Sets the current record's "updated_at" value
 * @method Usuario   setPerfil()     Sets the current record's "Perfil" value
 * 
 * @package    definiciones
 * @subpackage model
 * @author     Fabian Allel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuario');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('idperfil', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('login', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('password', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 40,
             ));
        $this->hasColumn('email', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('nombre', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('apellidos', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('facebook', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('twitter', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('activo', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('validado', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('borrado', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('lang', 'string', 4, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'es',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Perfil', array(
             'local' => 'idperfil',
             'foreign' => 'id'));
    }
}